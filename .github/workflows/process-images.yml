name: Process Images

on:
  workflow_call:
    inputs:
      image_urls_json:
        description: 'JSON string containing image URLs data'
        required: true
        type: string
      repository:
        description: 'Repository to update with processed images'
        required: true
        type: string
    secrets:
      token:
        description: 'GitHub token with write access to target repository'
        required: true

jobs:
  process-images:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout image-utils repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tensorflow pillow numpy scikit-learn imagehash
    
    - name: Process images
      run: |
        python -c "
        import json
        import os
        
        # Parse input data
        image_urls_data = json.loads('${{ inputs.image_urls_json }}')
        
        # Import processing modules
        from image_filter import prefilter_listings_for_download
        from download_images import download_images
        from image_dedup import dedupe_images
        from predict_image import predict_images_batch
        from load_model import load_model
        
        # Create temporary directories
        os.makedirs('temp_images', exist_ok=True)
        
        # Load model
        model_path = 'best_model.h5'
        model = load_model(model_path)
        
        # Process images
        # Filter listings
        filtered_listings = prefilter_listings_for_download(image_urls_data)
        print(f'Filtered {len(filtered_listings)} listings for download')
        
        # Download images
        download_images(filtered_listings, 'temp_images')
        
        # Deduplicate
        dedupe_images('temp_images')
        
        # Predict quality
        predictions = predict_images_batch('temp_images', model)
        
        # Save results
        with open('processing_results.json', 'w') as f:
            json.dump(predictions, f)
        "
    
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: image-processing-results
        path: |
          processing_results.json
          temp_images/
        retention-days: 7